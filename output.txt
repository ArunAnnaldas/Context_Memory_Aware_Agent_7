(base) dummyUser@dummyUsers-MacBook-Air 6_Context_Memory_Aware_Agent % python main.py
/Users/dummyUser/anaconda3/lib/python3.11/site-packages/langchain/chat_models/__init__.py:33: LangChainDeprecationWarning: Importing chat models from langchain is deprecated. Importing from langchain will no longer be supported as of langchain==0.2.0. Please import from langchain-community instead:

`from langchain_community.chat_models import ChatOpenAI`.

To install langchain-community run `pip install -U langchain-community`.
  warnings.warn(
/Users/dummyUser/anaconda3/lib/python3.11/site-packages/langchain/chat_models/__init__.py:33: LangChainDeprecationWarning: Importing chat models from langchain is deprecated. Importing from langchain will no longer be supported as of langchain==0.2.0. Please import from langchain-community instead:

`from langchain_community.chat_models import ChatOpenAI`.

To install langchain-community run `pip install -U langchain-community`.
  warnings.warn(
/Users/dummyUser/Documents/Learning/AgenticAI/6_Context_Memory_Aware_Agent/main.py:5: LangChainDeprecationWarning: Importing get_openai_callback from /Users/dummyUser/anaconda3/lib/python3.11/site-packages/langchain/callbacks/__init__.py is deprecated. Please replace deprecated imports:

>> from /Users/dummyUser/anaconda3/lib/python3.11/site-packages/langchain/callbacks/__init__.py import get_openai_callback

with new imports of:

>> from langchain_community.callbacks.manager import get_openai_callback
You can use the langchain cli to **automatically** upgrade many imports. Please see documentation here <https://python.langchain.com/docs/versions/v0_2/>
  from langchain.callbacks import get_openai_callback
/Users/dummyUser/Documents/Learning/AgenticAI/6_Context_Memory_Aware_Agent/main.py:8: LangChainDeprecationWarning: Please see the migration guide at: https://python.langchain.com/docs/versions/migrating_memory/
  memory = ConversationBufferMemory(memory_key="history", return_messages=True)
/Users/dummyUser/Documents/Learning/AgenticAI/6_Context_Memory_Aware_Agent/main.py:11: LangChainDeprecationWarning: The class `ChatOpenAI` was deprecated in LangChain 0.0.10 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-openai package and should be used instead. To use it run `pip install -U :class:`~langchain-openai` and import as `from :class:`~langchain_openai import ChatOpenAI``.
  llm = ChatOpenAI(
/Users/dummyUser/Documents/Learning/AgenticAI/6_Context_Memory_Aware_Agent/main.py:18: LangChainDeprecationWarning: The class `ConversationChain` was deprecated in LangChain 0.2.7 and will be removed in 1.0. Use :meth:`~RunnableWithMessageHistory: https://python.langchain.com/v0.2/api_reference/core/runnables/langchain_core.runnables.history.RunnableWithMessageHistory.html` instead.
  conversation = ConversationChain(

 Memory-Aware Multi-Turn Task

 User: Write a Python function to reverse a string


> Entering new ConversationChain chain...
Prompt after formatting:
The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.

Current conversation:
[]
Human: Write a Python function to reverse a string
AI:

> Finished chain.
 Assistant:
Sure! Here is a Python function that reverses a string:

```python
def reverse_string(input_string):
    return input_string[::-1]
```

You can use this function by passing a string as an argument, like this:

```python
print(reverse_string("hello"))  # Output: "olleh"
```

 User: Now write a function that uses the previous one to check for a palindrome


> Entering new ConversationChain chain...
Prompt after formatting:
The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.

Current conversation:
[HumanMessage(content='Write a Python function to reverse a string', additional_kwargs={}, response_metadata={}), AIMessage(content='Sure! Here is a Python function that reverses a string:\n\n```python\ndef reverse_string(input_string):\n    return input_string[::-1]\n```\n\nYou can use this function by passing a string as an argument, like this:\n\n```python\nprint(reverse_string("hello"))  # Output: "olleh"\n```', additional_kwargs={}, response_metadata={})]
Human: Now write a function that uses the previous one to check for a palindrome
AI:

> Finished chain.
 Assistant:
Sure! Here is a Python function that uses the previous function to check for a palindrome:

```python
def is_palindrome(input_string):
    reversed_string = reverse_string(input_string)
    if input_string == reversed_string:
        return True
    else:
        return False
```

You can use this function by passing a string as an argument, like this:

```python
print(is_palindrome("racecar"))  # Output: True
print(is_palindrome("hello"))  # Output: False
```

 Current Memory History:
[HumanMessage(content='Write a Python function to reverse a string', additional_kwargs={}, response_metadata={}), AIMessage(content='Sure! Here is a Python function that reverses a string:\n\n```python\ndef reverse_string(input_string):\n    return input_string[::-1]\n```\n\nYou can use this function by passing a string as an argument, like this:\n\n```python\nprint(reverse_string("hello"))  # Output: "olleh"\n```', additional_kwargs={}, response_metadata={}), HumanMessage(content='Now write a function that uses the previous one to check for a palindrome', additional_kwargs={}, response_metadata={}), AIMessage(content='Sure! Here is a Python function that uses the previous function to check for a palindrome:\n\n```python\ndef is_palindrome(input_string):\n    reversed_string = reverse_string(input_string)\n    if input_string == reversed_string:\n        return True\n    else:\n        return False\n```\n\nYou can use this function by passing a string as an argument, like this:\n\n```python\nprint(is_palindrome("racecar"))  # Output: True\nprint(is_palindrome("hello"))  # Output: False\n```', additional_kwargs={}, response_metadata={})]

 Token Usage Summary:
Tokens Used: 431
	Prompt Tokens: 259
		Prompt Tokens Cached: 0
	Completion Tokens: 172
		Reasoning Tokens: 0
Successful Requests: 2
Total Cost (USD): $0.0007325000000000001
(base) dummyUser@dummyUsers-MacBook-Air 6_Context_Memory_Aware_Agent % 
